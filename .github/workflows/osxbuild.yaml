name: build_osx

on:
  push:
    branches: [ master ]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  osx_app:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "0.7.8"

    - name: Install system dependencies
      run: |
        brew update
        brew install libzip
        brew install --build-from-source sdl2 sdl2_image sdl2_ttf sdl2_mixer

    - name: Build KataGo
      run: |
        rm -f katrain/KataGo/katago
        rm -f katrain/KataGo/*.dll
        rm -f katrain/KataGo/katago.exe
        cd ..
        git clone --branch stable https://github.com/lightvector/KataGo.git
        pushd KataGo/cpp
        cmake . -DUSE_BACKEND=OPENCL -DBUILD_DISTRIBUTED=1
        make -j$(sysctl -n hw.ncpu)
        cp katago ../../katrain/katrain/KataGo/katago-osx
        popd

    - name: Install Python dependencies
      run: |
        uv sync
        source .venv/bin/activate
        pip install Cython==3.0.11
        pip install kivy[base]==2.3.1
        pip install pyinstaller

    - name: Get app version
      run: |
        source .venv/bin/activate
        export KATRAIN_VERSION=$(python -c 'from katrain.core.constants import VERSION;print(VERSION)')
        echo "KATRAIN_VERSION=${KATRAIN_VERSION}" >> $GITHUB_ENV

    - name: Create PyInstaller spec file
      run: |
        cat > katrain.spec << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-
        import os
        from kivy.tools.packaging.pyinstaller_hooks import get_deps_minimal, hookspath, runtime_hooks

        block_cipher = None

        a = Analysis(
            ['katrain/__main__.py'],
            pathex=[],
            binaries=[('katrain/KataGo/katago-osx', 'katrain/KataGo/')],
            datas=[
                ('katrain/img', 'katrain/img'),
                ('katrain/sounds', 'katrain/sounds'), 
                ('katrain/config', 'katrain/config'),
                ('katrain/i18n', 'katrain/i18n'),
                ('katrain/models', 'katrain/models'),
                ('katrain/*.kv', 'katrain/'),
            ],
            hiddenimports=[],
            hookspath=hookspath(),
            hooksconfig={},
            runtime_hooks=runtime_hooks(),
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
            **get_deps_minimal()
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

        exe = EXE(
            pyz,
            a.scripts,
            [],
            exclude_binaries=True,
            name='KaTrain',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            console=False,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )

        coll = COLLECT(
            exe,
            a.binaries,
            a.zipfiles,
            a.datas,
            strip=False,
            upx=True,
            upx_exclude=[],
            name='KaTrain',
        )

        app = BUNDLE(
            coll,
            name='KaTrain.app',
            icon='katrain/img/icon.ico',
            bundle_identifier='org.katrain.KaTrain',
            version='${{ env.KATRAIN_VERSION }}',
            info_plist={
                'NSHighResolutionCapable': 'True',
                'NSAppleScriptEnabled': False,
                'CFBundleDocumentTypes': [
                    {
                        'CFBundleTypeName': 'Stone Game Format',
                        'CFBundleTypeRole': 'Editor',
                        'LSHandlerRank': 'Owner',
                        'LSItemContentTypes': ['org.katrain.sgf'],
                        'CFBundleTypeExtensions': ['sgf', 'SGF']
                    }
                ],
                'UTExportedTypeDeclarations': [
                    {
                        'UTTypeIdentifier': 'org.katrain.sgf',
                        'UTTypeDescription': 'KaTrain SGF File',
                        'UTTypeConformsTo': ['public.data', 'public.text'],
                        'UTTypeTagSpecification': {
                            'public.filename-extension': ['sgf', 'SGF']
                        }
                    }
                ]
            },
        )
        EOF

    - name: Build app with PyInstaller
      run: |
        source .venv/bin/activate
        pyinstaller katrain.spec --clean --noconfirm

    - name: Sign the app (ad-hoc)
      run: |
        # Sign the app bundle for local testing
        codesign --force --deep --sign - dist/KaTrain.app

    - name: Create DMG
      run: |
        # Create a DMG file
        mkdir -p dmg_temp
        cp -R dist/KaTrain.app dmg_temp/
        
        # Create Applications symlink for drag-and-drop installation
        ln -s /Applications dmg_temp/Applications
        
        # Create the DMG
        hdiutil create -volname "KaTrain ${{ env.KATRAIN_VERSION }}" \
                       -srcfolder dmg_temp \
                       -ov \
                       -format UDZO \
                       "KaTrain-${{ env.KATRAIN_VERSION }}.dmg"
        
        # Prepare output directory
        mkdir -p osx_app
        mv "KaTrain-${{ env.KATRAIN_VERSION }}.dmg" osx_app/

    - name: Upload app as artifact
      uses: actions/upload-artifact@v4
      with:
        name: KaTrainOSX
        path: osx_app
